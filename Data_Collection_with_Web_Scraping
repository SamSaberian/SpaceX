# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from bs4 import BeautifulSoup
import requests

# Scrape data from the Wikipedia page
url = "https://en.wikipedia.org/wiki/List_of_Falcon_9_and_Falcon_Heavy_launches"
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# Find the table with launch data
table = soup.find('table', {'class': 'wikitable'})
df = pd.read_html(str(table))[0]

# Data cleaning and preprocessing
# You may need to adjust this based on the actual structure of the table
# and your prediction requirements
df = df[['Date and time (UTC)', 'Booster landing', 'Outcome']]

# Convert date to datetime format
df['Date and time (UTC)'] = pd.to_datetime(df['Date and time (UTC)'])

# Convert landing and outcome to binary values (1 for success, 0 for failure)
df['Booster landing'] = df['Booster landing'].apply(lambda x: 1 if x == 'Success' else 0)
df['Outcome'] = df['Outcome'].apply(lambda x: 1 if x == 'Success' else 0)

# Feature engineering (you may need to add more features based on your model)
df['Year'] = df['Date and time (UTC)'].dt.year

# Split the data into training and testing sets
X = df[['Year']]
y = df['Booster landing']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a simple Random Forest Classifier (you may need a more sophisticated model)
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f"Model Accuracy: {accuracy}")

# Now you can use the trained model for predictions on new data
# For a presentation, you can use tools like Matplotlib or Seaborn to visualize the data and predictions.
